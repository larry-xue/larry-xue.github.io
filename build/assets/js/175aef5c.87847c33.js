"use strict";(self.webpackChunklarry_xue_github_io=self.webpackChunklarry_xue_github_io||[]).push([[577],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),p=o,g=d["".concat(i,".").concat(p)]||d[p]||m[p]||a;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[d]="string"==typeof e?e:o,l[1]=c;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7924:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={title:"How to execute command with wildcard(*) in Golang?",date:"2022-12-15T21:47",author:"larry xue",url:"https://github.com/larry-xue",tags:["golang","os/exec"]},l=void 0,c={unversionedId:"golang/os-exec-command-wildcard",id:"golang/os-exec-command-wildcard",title:"How to execute command with wildcard(*) in Golang?",description:"Solution",source:"@site/docs/golang/os-exec-command-wildcard.md",sourceDirName:"golang",slug:"/golang/os-exec-command-wildcard",permalink:"/docs/golang/os-exec-command-wildcard",draft:!1,tags:[{label:"golang",permalink:"/docs/tags/golang"},{label:"os/exec",permalink:"/docs/tags/os-exec"}],version:"current",frontMatter:{title:"How to execute command with wildcard(*) in Golang?",date:"2022-12-15T21:47",author:"larry xue",url:"https://github.com/larry-xue",tags:["golang","os/exec"]},sidebar:"defaultSidebar",previous:{title:"larry's blogs about golang",permalink:"/docs/golang/"},next:{title:"larry's blogs about javascript",permalink:"/docs/javascript/"}},i={},s=[{value:"Solution",id:"solution",level:2},{value:"Why /bin/sh -c works?",id:"why-binsh--c-works",level:2}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("p",null,"To execute a command with a wildcard in Go, you can use the exec.Command function from the os/exec package. This function takes a command and any arguments as input and returns a *Cmd object that can be used to execute the command."),(0,o.kt)("p",null,"Here is an example of how you might use the exec.Command function to execute a command with a wildcard:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "os/exec"\n)\n\nfunc main() {\n    cmd := exec.Command("ls", "/var/*") // this line will be translated to ls \'/var/*\', but we want: ls /var/*\n    cmd := exec.Command("/bin/sh", "-c", "ls /var/*")\n    out, err := cmd.Output()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    fmt.Println(string(out))\n}\n\n')),(0,o.kt)("h2",{id:"why-binsh--c-works"},"Why /bin/sh -c works?"),(0,o.kt)("p",null,"In Unix-like operating systems, /bin/sh is the default command interpreter or shell. The -c flag is used to run a command specified as a string following the flag. So, our command will not be translated."))}d.isMDXComponent=!0}}]);